{
 "cells": [
  {
   "cell_type": "raw",
   "id": "7c434714",
   "metadata": {
    "papermill": {
     "duration": 0.006542,
     "end_time": "2024-05-11T14:26:28.020401",
     "exception": false,
     "start_time": "2024-05-11T14:26:28.013859",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "IMPORT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3d0042fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:28.033780Z",
     "iopub.status.busy": "2024-05-11T14:26:28.033428Z",
     "iopub.status.idle": "2024-05-11T14:26:28.847782Z",
     "shell.execute_reply": "2024-05-11T14:26:28.846414Z"
    },
    "papermill": {
     "duration": 0.823353,
     "end_time": "2024-05-11T14:26:28.849592",
     "exception": false,
     "start_time": "2024-05-11T14:26:28.026239",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test shape: (1459, 80) , Train shape (1460, 81)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "test= pd.read_csv(r\"/kaggle/input/house-prices-advanced-regression-techniques/test.csv\")\n",
    "train= pd.read_csv(r\"/kaggle/input/house-prices-advanced-regression-techniques/train.csv\")\n",
    "print(\"Test shape:\",test.shape,\", Train shape\",train.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c9762523",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:28.863449Z",
     "iopub.status.busy": "2024-05-11T14:26:28.863123Z",
     "iopub.status.idle": "2024-05-11T14:26:28.896457Z",
     "shell.execute_reply": "2024-05-11T14:26:28.895569Z"
    },
    "papermill": {
     "duration": 0.0429,
     "end_time": "2024-05-11T14:26:28.898592",
     "exception": false,
     "start_time": "2024-05-11T14:26:28.855692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>208500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2007</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>181500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>223500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>140000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows Ã— 81 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n",
       "1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n",
       "2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n",
       "3   4          70       RL         60.0     9550   Pave   NaN      IR1   \n",
       "\n",
       "  LandContour Utilities  ... PoolArea PoolQC Fence MiscFeature MiscVal MoSold  \\\n",
       "0         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n",
       "1         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      5   \n",
       "2         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      9   \n",
       "3         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n",
       "\n",
       "  YrSold  SaleType  SaleCondition  SalePrice  \n",
       "0   2008        WD         Normal     208500  \n",
       "1   2007        WD         Normal     181500  \n",
       "2   2008        WD         Normal     223500  \n",
       "3   2006        WD        Abnorml     140000  \n",
       "\n",
       "[4 rows x 81 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "10822299",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:28.912708Z",
     "iopub.status.busy": "2024-05-11T14:26:28.912364Z",
     "iopub.status.idle": "2024-05-11T14:26:28.929421Z",
     "shell.execute_reply": "2024-05-11T14:26:28.928392Z"
    },
    "papermill": {
     "duration": 0.026427,
     "end_time": "2024-05-11T14:26:28.931433",
     "exception": false,
     "start_time": "2024-05-11T14:26:28.905006",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1461</td>\n",
       "      <td>20</td>\n",
       "      <td>RH</td>\n",
       "      <td>80.0</td>\n",
       "      <td>11622</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>120</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MnPrv</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1462</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>81.0</td>\n",
       "      <td>14267</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Gar2</td>\n",
       "      <td>12500</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1463</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>74.0</td>\n",
       "      <td>13830</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MnPrv</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1464</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>78.0</td>\n",
       "      <td>9978</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows Ã— 80 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "0  1461          20       RH         80.0    11622   Pave   NaN      Reg   \n",
       "1  1462          20       RL         81.0    14267   Pave   NaN      IR1   \n",
       "2  1463          60       RL         74.0    13830   Pave   NaN      IR1   \n",
       "3  1464          60       RL         78.0     9978   Pave   NaN      IR1   \n",
       "\n",
       "  LandContour Utilities  ... ScreenPorch PoolArea PoolQC  Fence MiscFeature  \\\n",
       "0         Lvl    AllPub  ...         120        0    NaN  MnPrv         NaN   \n",
       "1         Lvl    AllPub  ...           0        0    NaN    NaN        Gar2   \n",
       "2         Lvl    AllPub  ...           0        0    NaN  MnPrv         NaN   \n",
       "3         Lvl    AllPub  ...           0        0    NaN    NaN         NaN   \n",
       "\n",
       "  MiscVal MoSold  YrSold  SaleType  SaleCondition  \n",
       "0       0      6    2010        WD         Normal  \n",
       "1   12500      6    2010        WD         Normal  \n",
       "2       0      3    2010        WD         Normal  \n",
       "3       0      6    2010        WD         Normal  \n",
       "\n",
       "[4 rows x 80 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "432a8823",
   "metadata": {
    "papermill": {
     "duration": 0.006941,
     "end_time": "2024-05-11T14:26:28.945040",
     "exception": false,
     "start_time": "2024-05-11T14:26:28.938099",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Exploring the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "64cc0d85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:28.959136Z",
     "iopub.status.busy": "2024-05-11T14:26:28.958794Z",
     "iopub.status.idle": "2024-05-11T14:26:28.979841Z",
     "shell.execute_reply": "2024-05-11T14:26:28.978617Z"
    },
    "papermill": {
     "duration": 0.030588,
     "end_time": "2024-05-11T14:26:28.982045",
     "exception": false,
     "start_time": "2024-05-11T14:26:28.951457",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1460 entries, 0 to 1459\n",
      "Data columns (total 81 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Id             1460 non-null   int64  \n",
      " 1   MSSubClass     1460 non-null   int64  \n",
      " 2   MSZoning       1460 non-null   object \n",
      " 3   LotFrontage    1201 non-null   float64\n",
      " 4   LotArea        1460 non-null   int64  \n",
      " 5   Street         1460 non-null   object \n",
      " 6   Alley          91 non-null     object \n",
      " 7   LotShape       1460 non-null   object \n",
      " 8   LandContour    1460 non-null   object \n",
      " 9   Utilities      1460 non-null   object \n",
      " 10  LotConfig      1460 non-null   object \n",
      " 11  LandSlope      1460 non-null   object \n",
      " 12  Neighborhood   1460 non-null   object \n",
      " 13  Condition1     1460 non-null   object \n",
      " 14  Condition2     1460 non-null   object \n",
      " 15  BldgType       1460 non-null   object \n",
      " 16  HouseStyle     1460 non-null   object \n",
      " 17  OverallQual    1460 non-null   int64  \n",
      " 18  OverallCond    1460 non-null   int64  \n",
      " 19  YearBuilt      1460 non-null   int64  \n",
      " 20  YearRemodAdd   1460 non-null   int64  \n",
      " 21  RoofStyle      1460 non-null   object \n",
      " 22  RoofMatl       1460 non-null   object \n",
      " 23  Exterior1st    1460 non-null   object \n",
      " 24  Exterior2nd    1460 non-null   object \n",
      " 25  MasVnrType     588 non-null    object \n",
      " 26  MasVnrArea     1452 non-null   float64\n",
      " 27  ExterQual      1460 non-null   object \n",
      " 28  ExterCond      1460 non-null   object \n",
      " 29  Foundation     1460 non-null   object \n",
      " 30  BsmtQual       1423 non-null   object \n",
      " 31  BsmtCond       1423 non-null   object \n",
      " 32  BsmtExposure   1422 non-null   object \n",
      " 33  BsmtFinType1   1423 non-null   object \n",
      " 34  BsmtFinSF1     1460 non-null   int64  \n",
      " 35  BsmtFinType2   1422 non-null   object \n",
      " 36  BsmtFinSF2     1460 non-null   int64  \n",
      " 37  BsmtUnfSF      1460 non-null   int64  \n",
      " 38  TotalBsmtSF    1460 non-null   int64  \n",
      " 39  Heating        1460 non-null   object \n",
      " 40  HeatingQC      1460 non-null   object \n",
      " 41  CentralAir     1460 non-null   object \n",
      " 42  Electrical     1459 non-null   object \n",
      " 43  1stFlrSF       1460 non-null   int64  \n",
      " 44  2ndFlrSF       1460 non-null   int64  \n",
      " 45  LowQualFinSF   1460 non-null   int64  \n",
      " 46  GrLivArea      1460 non-null   int64  \n",
      " 47  BsmtFullBath   1460 non-null   int64  \n",
      " 48  BsmtHalfBath   1460 non-null   int64  \n",
      " 49  FullBath       1460 non-null   int64  \n",
      " 50  HalfBath       1460 non-null   int64  \n",
      " 51  BedroomAbvGr   1460 non-null   int64  \n",
      " 52  KitchenAbvGr   1460 non-null   int64  \n",
      " 53  KitchenQual    1460 non-null   object \n",
      " 54  TotRmsAbvGrd   1460 non-null   int64  \n",
      " 55  Functional     1460 non-null   object \n",
      " 56  Fireplaces     1460 non-null   int64  \n",
      " 57  FireplaceQu    770 non-null    object \n",
      " 58  GarageType     1379 non-null   object \n",
      " 59  GarageYrBlt    1379 non-null   float64\n",
      " 60  GarageFinish   1379 non-null   object \n",
      " 61  GarageCars     1460 non-null   int64  \n",
      " 62  GarageArea     1460 non-null   int64  \n",
      " 63  GarageQual     1379 non-null   object \n",
      " 64  GarageCond     1379 non-null   object \n",
      " 65  PavedDrive     1460 non-null   object \n",
      " 66  WoodDeckSF     1460 non-null   int64  \n",
      " 67  OpenPorchSF    1460 non-null   int64  \n",
      " 68  EnclosedPorch  1460 non-null   int64  \n",
      " 69  3SsnPorch      1460 non-null   int64  \n",
      " 70  ScreenPorch    1460 non-null   int64  \n",
      " 71  PoolArea       1460 non-null   int64  \n",
      " 72  PoolQC         7 non-null      object \n",
      " 73  Fence          281 non-null    object \n",
      " 74  MiscFeature    54 non-null     object \n",
      " 75  MiscVal        1460 non-null   int64  \n",
      " 76  MoSold         1460 non-null   int64  \n",
      " 77  YrSold         1460 non-null   int64  \n",
      " 78  SaleType       1460 non-null   object \n",
      " 79  SaleCondition  1460 non-null   object \n",
      " 80  SalePrice      1460 non-null   int64  \n",
      "dtypes: float64(3), int64(35), object(43)\n",
      "memory usage: 924.0+ KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7e464650",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:28.997368Z",
     "iopub.status.busy": "2024-05-11T14:26:28.997040Z",
     "iopub.status.idle": "2024-05-11T14:26:29.012325Z",
     "shell.execute_reply": "2024-05-11T14:26:29.010741Z"
    },
    "papermill": {
     "duration": 0.025394,
     "end_time": "2024-05-11T14:26:29.014194",
     "exception": false,
     "start_time": "2024-05-11T14:26:28.988800",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1459 entries, 0 to 1458\n",
      "Data columns (total 80 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Id             1459 non-null   int64  \n",
      " 1   MSSubClass     1459 non-null   int64  \n",
      " 2   MSZoning       1455 non-null   object \n",
      " 3   LotFrontage    1232 non-null   float64\n",
      " 4   LotArea        1459 non-null   int64  \n",
      " 5   Street         1459 non-null   object \n",
      " 6   Alley          107 non-null    object \n",
      " 7   LotShape       1459 non-null   object \n",
      " 8   LandContour    1459 non-null   object \n",
      " 9   Utilities      1457 non-null   object \n",
      " 10  LotConfig      1459 non-null   object \n",
      " 11  LandSlope      1459 non-null   object \n",
      " 12  Neighborhood   1459 non-null   object \n",
      " 13  Condition1     1459 non-null   object \n",
      " 14  Condition2     1459 non-null   object \n",
      " 15  BldgType       1459 non-null   object \n",
      " 16  HouseStyle     1459 non-null   object \n",
      " 17  OverallQual    1459 non-null   int64  \n",
      " 18  OverallCond    1459 non-null   int64  \n",
      " 19  YearBuilt      1459 non-null   int64  \n",
      " 20  YearRemodAdd   1459 non-null   int64  \n",
      " 21  RoofStyle      1459 non-null   object \n",
      " 22  RoofMatl       1459 non-null   object \n",
      " 23  Exterior1st    1458 non-null   object \n",
      " 24  Exterior2nd    1458 non-null   object \n",
      " 25  MasVnrType     565 non-null    object \n",
      " 26  MasVnrArea     1444 non-null   float64\n",
      " 27  ExterQual      1459 non-null   object \n",
      " 28  ExterCond      1459 non-null   object \n",
      " 29  Foundation     1459 non-null   object \n",
      " 30  BsmtQual       1415 non-null   object \n",
      " 31  BsmtCond       1414 non-null   object \n",
      " 32  BsmtExposure   1415 non-null   object \n",
      " 33  BsmtFinType1   1417 non-null   object \n",
      " 34  BsmtFinSF1     1458 non-null   float64\n",
      " 35  BsmtFinType2   1417 non-null   object \n",
      " 36  BsmtFinSF2     1458 non-null   float64\n",
      " 37  BsmtUnfSF      1458 non-null   float64\n",
      " 38  TotalBsmtSF    1458 non-null   float64\n",
      " 39  Heating        1459 non-null   object \n",
      " 40  HeatingQC      1459 non-null   object \n",
      " 41  CentralAir     1459 non-null   object \n",
      " 42  Electrical     1459 non-null   object \n",
      " 43  1stFlrSF       1459 non-null   int64  \n",
      " 44  2ndFlrSF       1459 non-null   int64  \n",
      " 45  LowQualFinSF   1459 non-null   int64  \n",
      " 46  GrLivArea      1459 non-null   int64  \n",
      " 47  BsmtFullBath   1457 non-null   float64\n",
      " 48  BsmtHalfBath   1457 non-null   float64\n",
      " 49  FullBath       1459 non-null   int64  \n",
      " 50  HalfBath       1459 non-null   int64  \n",
      " 51  BedroomAbvGr   1459 non-null   int64  \n",
      " 52  KitchenAbvGr   1459 non-null   int64  \n",
      " 53  KitchenQual    1458 non-null   object \n",
      " 54  TotRmsAbvGrd   1459 non-null   int64  \n",
      " 55  Functional     1457 non-null   object \n",
      " 56  Fireplaces     1459 non-null   int64  \n",
      " 57  FireplaceQu    729 non-null    object \n",
      " 58  GarageType     1383 non-null   object \n",
      " 59  GarageYrBlt    1381 non-null   float64\n",
      " 60  GarageFinish   1381 non-null   object \n",
      " 61  GarageCars     1458 non-null   float64\n",
      " 62  GarageArea     1458 non-null   float64\n",
      " 63  GarageQual     1381 non-null   object \n",
      " 64  GarageCond     1381 non-null   object \n",
      " 65  PavedDrive     1459 non-null   object \n",
      " 66  WoodDeckSF     1459 non-null   int64  \n",
      " 67  OpenPorchSF    1459 non-null   int64  \n",
      " 68  EnclosedPorch  1459 non-null   int64  \n",
      " 69  3SsnPorch      1459 non-null   int64  \n",
      " 70  ScreenPorch    1459 non-null   int64  \n",
      " 71  PoolArea       1459 non-null   int64  \n",
      " 72  PoolQC         3 non-null      object \n",
      " 73  Fence          290 non-null    object \n",
      " 74  MiscFeature    51 non-null     object \n",
      " 75  MiscVal        1459 non-null   int64  \n",
      " 76  MoSold         1459 non-null   int64  \n",
      " 77  YrSold         1459 non-null   int64  \n",
      " 78  SaleType       1458 non-null   object \n",
      " 79  SaleCondition  1459 non-null   object \n",
      "dtypes: float64(11), int64(26), object(43)\n",
      "memory usage: 912.0+ KB\n"
     ]
    }
   ],
   "source": [
    "test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3eded708",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:29.028903Z",
     "iopub.status.busy": "2024-05-11T14:26:29.028596Z",
     "iopub.status.idle": "2024-05-11T14:26:29.044604Z",
     "shell.execute_reply": "2024-05-11T14:26:29.043781Z"
    },
    "papermill": {
     "duration": 0.025239,
     "end_time": "2024-05-11T14:26:29.046281",
     "exception": false,
     "start_time": "2024-05-11T14:26:29.021042",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>259</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1369</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1453</td>\n",
       "      <td>1179</td>\n",
       "      <td>1406</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 81 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  MSSubClass  MSZoning  LotFrontage  LotArea  Street  Alley  LotShape  \\\n",
       "0   0           0         0          259        0       0   1369         0   \n",
       "\n",
       "   LandContour  Utilities  ...  PoolArea  PoolQC  Fence  MiscFeature  MiscVal  \\\n",
       "0            0          0  ...         0    1453   1179         1406        0   \n",
       "\n",
       "   MoSold  YrSold  SaleType  SaleCondition  SalePrice  \n",
       "0       0       0         0              0          0  \n",
       "\n",
       "[1 rows x 81 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(train.isna().sum()).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d61d8bd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:29.062137Z",
     "iopub.status.busy": "2024-05-11T14:26:29.061798Z",
     "iopub.status.idle": "2024-05-11T14:26:29.079713Z",
     "shell.execute_reply": "2024-05-11T14:26:29.078476Z"
    },
    "papermill": {
     "duration": 0.028111,
     "end_time": "2024-05-11T14:26:29.081529",
     "exception": false,
     "start_time": "2024-05-11T14:26:29.053418",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>227</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1352</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1456</td>\n",
       "      <td>1169</td>\n",
       "      <td>1408</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 80 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  MSSubClass  MSZoning  LotFrontage  LotArea  Street  Alley  LotShape  \\\n",
       "0   0           0         4          227        0       0   1352         0   \n",
       "\n",
       "   LandContour  Utilities  ...  ScreenPorch  PoolArea  PoolQC  Fence  \\\n",
       "0            0          2  ...            0         0    1456   1169   \n",
       "\n",
       "   MiscFeature  MiscVal  MoSold  YrSold  SaleType  SaleCondition  \n",
       "0         1408        0       0       0         1              0  \n",
       "\n",
       "[1 rows x 80 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(test.isna().sum()).T"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0f8f933",
   "metadata": {
    "papermill": {
     "duration": 0.006802,
     "end_time": "2024-05-11T14:26:29.095635",
     "exception": false,
     "start_time": "2024-05-11T14:26:29.088833",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "1 split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f2b56d6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:29.110994Z",
     "iopub.status.busy": "2024-05-11T14:26:29.110684Z",
     "iopub.status.idle": "2024-05-11T14:26:29.115046Z",
     "shell.execute_reply": "2024-05-11T14:26:29.114253Z"
    },
    "papermill": {
     "duration": 0.014098,
     "end_time": "2024-05-11T14:26:29.116694",
     "exception": false,
     "start_time": "2024-05-11T14:26:29.102596",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_trainV1=train['SalePrice']\n",
    "y = y_trainV1\n",
    "\n",
    "tid=train['Id']\n",
    "testId_SUBMIT = test['Id']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "667fbfed",
   "metadata": {
    "papermill": {
     "duration": 0.006591,
     "end_time": "2024-05-11T14:26:29.130356",
     "exception": false,
     "start_time": "2024-05-11T14:26:29.123765",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Fill NA. \n",
    "In the description data file, the Na of the object variables are mostly absent of a house attribute, such as pool, etc. then these were filled with 0 because they are important data for the prediction.\n",
    "\n",
    "the numerical data were filled with the mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6837c23b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:29.145449Z",
     "iopub.status.busy": "2024-05-11T14:26:29.145162Z",
     "iopub.status.idle": "2024-05-11T14:26:29.215556Z",
     "shell.execute_reply": "2024-05-11T14:26:29.214710Z"
    },
    "papermill": {
     "duration": 0.080306,
     "end_time": "2024-05-11T14:26:29.217545",
     "exception": false,
     "start_time": "2024-05-11T14:26:29.137239",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train=train.drop(\"SalePrice\",axis=1)\n",
    "x= train\n",
    "\n",
    "for column in train.columns:\n",
    "    typ = train[column].dtype\n",
    "    if typ == \"object\":\n",
    "        train[column] = train[column].fillna(train[column].mode()[0])\n",
    "        test[column] = test[column].fillna(test[column].mode()[0])\n",
    "    else:\n",
    "        train[column] = train[column].fillna(train[column].mean())\n",
    "        test[column] = test[column].fillna(test[column].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e41903f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:29.233596Z",
     "iopub.status.busy": "2024-05-11T14:26:29.232925Z",
     "iopub.status.idle": "2024-05-11T14:26:29.251480Z",
     "shell.execute_reply": "2024-05-11T14:26:29.250584Z"
    },
    "papermill": {
     "duration": 0.028483,
     "end_time": "2024-05-11T14:26:29.253224",
     "exception": false,
     "start_time": "2024-05-11T14:26:29.224741",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 80 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  MSSubClass  MSZoning  LotFrontage  LotArea  Street  Alley  LotShape  \\\n",
       "0   0           0         0            0        0       0      0         0   \n",
       "\n",
       "   LandContour  Utilities  ...  ScreenPorch  PoolArea  PoolQC  Fence  \\\n",
       "0            0          0  ...            0         0       0      0   \n",
       "\n",
       "   MiscFeature  MiscVal  MoSold  YrSold  SaleType  SaleCondition  \n",
       "0            0        0       0       0         0              0  \n",
       "\n",
       "[1 rows x 80 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(train.isna().sum()).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "79a59413",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:29.268898Z",
     "iopub.status.busy": "2024-05-11T14:26:29.268614Z",
     "iopub.status.idle": "2024-05-11T14:26:29.288065Z",
     "shell.execute_reply": "2024-05-11T14:26:29.287245Z"
    },
    "papermill": {
     "duration": 0.029262,
     "end_time": "2024-05-11T14:26:29.289687",
     "exception": false,
     "start_time": "2024-05-11T14:26:29.260425",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 80 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  MSSubClass  MSZoning  LotFrontage  LotArea  Street  Alley  LotShape  \\\n",
       "0   0           0         0            0        0       0      0         0   \n",
       "\n",
       "   LandContour  Utilities  ...  ScreenPorch  PoolArea  PoolQC  Fence  \\\n",
       "0            0          0  ...            0         0       0      0   \n",
       "\n",
       "   MiscFeature  MiscVal  MoSold  YrSold  SaleType  SaleCondition  \n",
       "0            0        0       0       0         0              0  \n",
       "\n",
       "[1 rows x 80 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(test.isna().sum()).T"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec5e9d40",
   "metadata": {
    "papermill": {
     "duration": 0.006912,
     "end_time": "2024-05-11T14:26:29.304042",
     "exception": false,
     "start_time": "2024-05-11T14:26:29.297130",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "LABERENCODER, STANDARDSCALE AND TRAIN/TEST SPLIT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2c75530d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:29.321364Z",
     "iopub.status.busy": "2024-05-11T14:26:29.321008Z",
     "iopub.status.idle": "2024-05-11T14:26:30.284511Z",
     "shell.execute_reply": "2024-05-11T14:26:30.283222Z"
    },
    "papermill": {
     "duration": 0.974247,
     "end_time": "2024-05-11T14:26:30.286596",
     "exception": false,
     "start_time": "2024-05-11T14:26:29.312349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "le = LabelEncoder()\n",
    "for col in train.columns:\n",
    "    if train[col].dtype == \"object\":\n",
    "        train[col] = le.fit_transform(train[col]).astype(int)\n",
    "        test[col] = le.fit_transform(test[col]).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f11169f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:30.302596Z",
     "iopub.status.busy": "2024-05-11T14:26:30.302322Z",
     "iopub.status.idle": "2024-05-11T14:26:30.390147Z",
     "shell.execute_reply": "2024-05-11T14:26:30.389327Z"
    },
    "papermill": {
     "duration": 0.098045,
     "end_time": "2024-05-11T14:26:30.392234",
     "exception": false,
     "start_time": "2024-05-11T14:26:30.294189",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, x_test,Y_train, y_test = train_test_split (x,y, test_size= 0.2, random_state=0)\n",
    "\n",
    "#I SPLIT THE DATA IN A WAY THAT I CAN HAVE THE Y_TEST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a7c58f49",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:30.408632Z",
     "iopub.status.busy": "2024-05-11T14:26:30.408329Z",
     "iopub.status.idle": "2024-05-11T14:26:30.424842Z",
     "shell.execute_reply": "2024-05-11T14:26:30.424094Z"
    },
    "papermill": {
     "duration": 0.026952,
     "end_time": "2024-05-11T14:26:30.426868",
     "exception": false,
     "start_time": "2024-05-11T14:26:30.399916",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "sc_X = StandardScaler()\n",
    "X_train=sc_X.fit_transform(X_train)\n",
    "x_test=sc_X.transform(x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1997e5a6",
   "metadata": {
    "papermill": {
     "duration": 0.00707,
     "end_time": "2024-05-11T14:26:30.441594",
     "exception": false,
     "start_time": "2024-05-11T14:26:30.434524",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "FOREST\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76759b66",
   "metadata": {
    "papermill": {
     "duration": 0.006926,
     "end_time": "2024-05-11T14:26:30.455626",
     "exception": false,
     "start_time": "2024-05-11T14:26:30.448700",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d3e43371",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:30.471467Z",
     "iopub.status.busy": "2024-05-11T14:26:30.471161Z",
     "iopub.status.idle": "2024-05-11T14:26:31.056682Z",
     "shell.execute_reply": "2024-05-11T14:26:31.055569Z"
    },
    "papermill": {
     "duration": 0.59589,
     "end_time": "2024-05-11T14:26:31.058777",
     "exception": false,
     "start_time": "2024-05-11T14:26:30.462887",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error (MSE): 1070122036.3766011\n",
      "R-Squared: 0.8450412270821746\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "modelRF = RandomForestRegressor(n_estimators=20,random_state=1)\n",
    "modelRF.fit(X_train, Y_train)\n",
    "\n",
    "y_predRF = modelRF.predict(x_test)\n",
    "mseRF = mean_squared_error(y_test, y_predRF)\n",
    "print(\"Mean Squared Error (MSE):\", mseRF)\n",
    "from sklearn.metrics import r2_score\n",
    "\n",
    "\n",
    "r2RF = r2_score(y_test, y_predRF)\n",
    "print(\"R-Squared:\", r2RF)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c9c04da",
   "metadata": {
    "papermill": {
     "duration": 0.007025,
     "end_time": "2024-05-11T14:26:31.073451",
     "exception": false,
     "start_time": "2024-05-11T14:26:31.066426",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "LASSO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8c2a8144",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:31.089164Z",
     "iopub.status.busy": "2024-05-11T14:26:31.088792Z",
     "iopub.status.idle": "2024-05-11T14:26:31.116597Z",
     "shell.execute_reply": "2024-05-11T14:26:31.115661Z"
    },
    "papermill": {
     "duration": 0.037853,
     "end_time": "2024-05-11T14:26:31.118399",
     "exception": false,
     "start_time": "2024-05-11T14:26:31.080546",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error (MSE): 3187735885.5605016\n",
      "R-Squared: 0.5384006455141028\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import Lasso\n",
    "\n",
    "modelLasso = Lasso()\n",
    "modelLasso.fit(X_train, Y_train)\n",
    "y_predLasso = modelLasso.predict(x_test)\n",
    "\n",
    "mseLasso = mean_squared_error(y_test, y_predLasso)\n",
    "print(\"Mean Squared Error (MSE):\", mseLasso)\n",
    "\n",
    "\n",
    "r2Lasso = r2_score(y_test, y_predLasso)\n",
    "print(\"R-Squared:\", r2Lasso)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b9de72b",
   "metadata": {
    "papermill": {
     "duration": 0.01878,
     "end_time": "2024-05-11T14:26:31.151411",
     "exception": false,
     "start_time": "2024-05-11T14:26:31.132631",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Results: choose the \"best regression\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ced2ce4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:31.192326Z",
     "iopub.status.busy": "2024-05-11T14:26:31.191522Z",
     "iopub.status.idle": "2024-05-11T14:26:31.199648Z",
     "shell.execute_reply": "2024-05-11T14:26:31.198794Z"
    },
    "papermill": {
     "duration": 0.035247,
     "end_time": "2024-05-11T14:26:31.202605",
     "exception": false,
     "start_time": "2024-05-11T14:26:31.167358",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Model  Mean Squared Error (MSE)  R-Squared\n",
      "0  FOREST              1.070122e+09   0.845041\n",
      "1   LASSO              3.187736e+09   0.538401\n"
     ]
    }
   ],
   "source": [
    "\n",
    "data_results = [\n",
    "    \n",
    "    \n",
    "    [\"FOREST\", mseRF, r2RF],\n",
    "    [\"LASSO\", mseLasso, r2Lasso],\n",
    "]\n",
    "\n",
    "results = pd.DataFrame(data_results, columns=[\"Model\", \"Mean Squared Error (MSE)\", \"R-Squared\"])\n",
    "print(results.to_string())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f668d4cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:31.232926Z",
     "iopub.status.busy": "2024-05-11T14:26:31.232636Z",
     "iopub.status.idle": "2024-05-11T14:26:31.466845Z",
     "shell.execute_reply": "2024-05-11T14:26:31.466012Z"
    },
    "papermill": {
     "duration": 0.249556,
     "end_time": "2024-05-11T14:26:31.468476",
     "exception": false,
     "start_time": "2024-05-11T14:26:31.218920",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "bars = plt.bar(results[\"Model\"], results[\"R-Squared\"], color='skyblue', alpha=0.7)\n",
    "\n",
    "plt.bar_label(bars, fmt=\"{:.2f}\".format)  \n",
    "\n",
    "plt.xlabel(\"Model\")\n",
    "plt.ylabel(\"R-Squared\")\n",
    "plt.title(\"R-Squared Comparison\")\n",
    "plt.xticks(rotation=45, ha=\"right\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "45c35667",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:31.486506Z",
     "iopub.status.busy": "2024-05-11T14:26:31.486197Z",
     "iopub.status.idle": "2024-05-11T14:26:31.685260Z",
     "shell.execute_reply": "2024-05-11T14:26:31.684166Z"
    },
    "papermill": {
     "duration": 0.210425,
     "end_time": "2024-05-11T14:26:31.687073",
     "exception": false,
     "start_time": "2024-05-11T14:26:31.476648",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6)) \n",
    "plt.bar(results[\"Model\"], results[\"Mean Squared Error (MSE)\"], color='lightcoral', alpha=0.7)\n",
    "plt.xlabel(\"Model\")\n",
    "plt.ylabel(\"Mean Squared Error (MSE)\")\n",
    "plt.title(\"Mean Squared Error Comparison\")\n",
    "plt.xticks(rotation=45, ha=\"right\")  \n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f132f09c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:31.704853Z",
     "iopub.status.busy": "2024-05-11T14:26:31.704533Z",
     "iopub.status.idle": "2024-05-11T14:26:31.716720Z",
     "shell.execute_reply": "2024-05-11T14:26:31.715574Z"
    },
    "papermill": {
     "duration": 0.023151,
     "end_time": "2024-05-11T14:26:31.718442",
     "exception": false,
     "start_time": "2024-05-11T14:26:31.695291",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1459\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestRegressor was fitted without feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "y_predSUBMIT = modelRF.predict(test)\n",
    "print(y_predSUBMIT.size)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a39c49c7",
   "metadata": {
    "papermill": {
     "duration": 0.007731,
     "end_time": "2024-05-11T14:26:31.734517",
     "exception": false,
     "start_time": "2024-05-11T14:26:31.726786",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "SUBMIT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f4871969",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:31.751887Z",
     "iopub.status.busy": "2024-05-11T14:26:31.751579Z",
     "iopub.status.idle": "2024-05-11T14:26:31.760257Z",
     "shell.execute_reply": "2024-05-11T14:26:31.759421Z"
    },
    "papermill": {
     "duration": 0.019375,
     "end_time": "2024-05-11T14:26:31.761915",
     "exception": false,
     "start_time": "2024-05-11T14:26:31.742540",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1461</td>\n",
       "      <td>471702.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1462</td>\n",
       "      <td>526501.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1463</td>\n",
       "      <td>518746.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1464</td>\n",
       "      <td>580967.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1465</td>\n",
       "      <td>468336.10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Id  SalePrice\n",
       "0  1461  471702.20\n",
       "1  1462  526501.85\n",
       "2  1463  518746.70\n",
       "3  1464  580967.25\n",
       "4  1465  468336.10"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission_df = pd.DataFrame({\n",
    "    'Id': testId_SUBMIT,\n",
    "    'SalePrice':y_predSUBMIT\n",
    "})\n",
    "submission_df.head(5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "273fa116",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T14:26:31.781691Z",
     "iopub.status.busy": "2024-05-11T14:26:31.781372Z",
     "iopub.status.idle": "2024-05-11T14:26:31.789431Z",
     "shell.execute_reply": "2024-05-11T14:26:31.788640Z"
    },
    "papermill": {
     "duration": 0.020572,
     "end_time": "2024-05-11T14:26:31.791134",
     "exception": false,
     "start_time": "2024-05-11T14:26:31.770562",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "submission_df.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "177992d7",
   "metadata": {
    "papermill": {
     "duration": 0.008041,
     "end_time": "2024-05-11T14:26:31.807731",
     "exception": false,
     "start_time": "2024-05-11T14:26:31.799690",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Any comments, suggestions, advice,etc. Please comment"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 868283,
     "sourceId": 5407,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.581206,
   "end_time": "2024-05-11T14:26:32.335622",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-11T14:26:25.754416",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
